
@mixin base-box-shadow{
  box-shadow: 0 3px 3px 0 rgba($gray-darkest, 0.5);
}
@mixin hover-box-shadow{
  box-shadow: 0 3px 15px 0 rgba($gray-darkest, 0.5);
}

@mixin default-transition() {
  transition: all $transition-time ease-out;
}

@mixin border( $size : 1px, $type: solid, $color: $gray-dark) {
  border: $size $type $color;
}

@mixin border-bottom( $size: 1px, $type: solid, $color : $gray-dark ) {
  border-bottom: $size $type $color;
}

@mixin border-left( $size: 5px, $type: solid, $color : $gray-dark ) {
  border-left: $size $type $color;
}

@mixin box-shadow( $hShadow : 0, $vShadow : 0, $blur : 5px, $spread: 0, $color: #333, $alpha: 0.35 ){
  box-shadow: $hShadow $vShadow $blur $spread rgba( $color, $alpha );
}

/// Mixin to prefix a property
/// @author Hugo Giraudel
/// @param {String} $property - Property name
/// @param {*} $value - Property value
/// @param {List} $prefixes (()) - List of prefixes to print
@mixin prefix($property, $value, $prefixes: ()) {
  @each $prefix in $prefixes {
    #{'-' + $prefix + '-' + $property}: $value;
  }

  // Output standard non-prefixed declaration
  #{$property}: $value;
}

/// Mixin printing a linear-gradient
/// as well as a plain color fallback
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {Keyword | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
  background: nth(nth($color-stops, 1), 1);
  background: -webkit-linear-gradient(legacy-direction($direction), $color-stops);
  background: linear-gradient($direction, $color-stops);
}

@mixin clearfix(){
  &:after{
    content:'';
    display: block;
    clear: both;
  }
}

/* mixin for multiline */
@mixin multiLineEllipsis($lineHeight: 1.2em, $lineCount: 1, $bgColor: white){
  overflow: hidden;
  position: relative;
  line-height: $lineHeight;
  max-height: $lineHeight * $lineCount;
  text-align: justify;
  margin-right: -1em;
  padding-right: 1em;
  &:before {
    content: '...';
    position: absolute;
    right: 0;
    bottom: 0;
  }
  &:after {
    content: '';
    position: absolute;
    right: 0;
    width: 1em;
    height: 1em;
    margin-top: 0.2em;
    background: $bgColor;
  }
}

.block-with-text {
  @include multiLineEllipsis($lineHeight: 1.2em, $lineCount: 3, $bgColor: white);
}

/// Test if `$value` is a valid direction
/// @param {*} $value - Value to test
/// @return {Bool}
@function is-direction($value) {
  $is-keyword: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
  $is-angle: type-of($value) == 'number' and index('deg' 'grad' 'turn' 'rad', unit($value));

  @return $is-keyword or $is-angle;
}

/// Convert a direction to legacy syntax
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
/// @throw Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.;
@function legacy-direction($value) {
  @if is-direction($value) == false {
    @error "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be a direction.";
  }

  $conversion-map: (
          to top          : bottom,
          to top right    : bottom left,
          to right top    : left bottom,
          to right        : left,
          to bottom right : top left,
          to right bottom : left top,
          to bottom       : top,
          to bottom left  : top right,
          to left bottom  : right top,
          to left         : right,
          to left top     : right bottom,
          to top left     : bottom right
  );

  @if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
  }

  @return 90deg - $value;
}

@mixin multiline-ellipsis($rows:3,$line-height:1.2em,$bg-color:white,$ie9_url:'../img/gradient-0-white.svg', $spacer:5px){
  $lineheight: 1.2em;
  $spacer: 5px;
  overflow: hidden;
  line-height: $lineheight;
  height: $lineheight*3;

  &:before {
    content: "";
    float: left;
    width: $spacer;
    height: inherit;
  }
  *:first-child{
    float:right;
    width:100%;
    margin-left: -#{$spacer};
  }
  &:after{
    @include prefix(box-sizing, 'content-box', 'moz' 'webkit');
    content: "\02026";
    float:right;
    position:relative;
    top:-#{$lineheight};
    left:100%;
    width: 3em;
    margin-left: 3em;
    padding-right: $spacer;
    text-align: right;

    @include linear-gradient(transparentize($bg-color, 0.75), $bg-color, $ie9_url);
  }
}
